// üö® DEBUG ESPECIALIZADO PARA FUNCTION CALLS Y TTS
// Pegar en la consola del navegador DESPU√âS de iniciar la aplicaci√≥n

console.log('üîß DR. DONUT - DIAGN√ìSTICO FUNCI√ìN CALLS Y TTS');
console.log('================================================\n');

window.drDonutAdvanced = {
  // 1. DIAGN√ìSTICO COMPLETO
  fullDiagnosis: async () => {
    console.log('üè• DIAGN√ìSTICO COMPLETO INICIADO...\n');
    
    // Check environment
    console.log('1Ô∏è‚É£ VARIABLES DE ENTORNO:');
    const vapiKey = process.env.NEXT_PUBLIC_VAPI_PUBLIC_KEY;
    const vapiAssistant = process.env.NEXT_PUBLIC_VAPI_ASSISTANT_ID;
    const simliKey = process.env.NEXT_PUBLIC_SIMLI_API_KEY;
    const simliFace = process.env.NEXT_PUBLIC_SIMLI_FACE_ID;
    
    console.log(`   VAPI Key: ${vapiKey ? '‚úÖ SET (' + vapiKey.slice(0,8) + '...)' : '‚ùå MISSING'}`);
    console.log(`   VAPI Assistant: ${vapiAssistant ? '‚úÖ SET (' + vapiAssistant.slice(0,8) + '...)' : '‚ùå MISSING'}`);
    console.log(`   Simli Key: ${simliKey ? '‚úÖ SET (' + simliKey.slice(0,8) + '...)' : '‚ùå MISSING'}`);
    console.log(`   Simli Face: ${simliFace ? '‚úÖ SET (' + simliFace.slice(0,8) + '...)' : '‚ùå MISSING'}`);
    
    // Check instances
    console.log('\n2Ô∏è‚É£ INSTANCIAS:');
    const simliInstance = window.getSimliInstance?.();
    const vapiInstance = window.vapi;
    
    console.log(`   Simli Instance: ${simliInstance ? '‚úÖ CONNECTED' : '‚ùå NOT FOUND'}`);
    console.log(`   VAPI Instance: ${vapiInstance ? '‚úÖ CONNECTED' : '‚ùå NOT FOUND'}`);
    
    // Test TTS
    console.log('\n3Ô∏è‚É£ TESTING SIMLI TTS...');
    if (simliInstance) {
      try {
        await simliInstance.sendTextMessage("Test de sincronizaci√≥n de labios");
        console.log('   ‚úÖ TTS Test PASSED - Avatar deber√≠a estar hablando');
      } catch (error) {
        console.log('   ‚ùå TTS Test FAILED:', error.message);
      }
    } else {
      console.log('   ‚ùå No se puede testear TTS - Simli no disponible');
    }
    
    // Monitor function calls
    console.log('\n4Ô∏è‚É£ MONITOREANDO FUNCTION CALLS...');
    this.monitorFunctionCalls();
    
    console.log('\nüí° SIGUIENTE PASO: Habla al micr√≥fono y observa los logs');
  },

  // 2. MONITOR ESPEC√çFICO PARA FUNCTION CALLS
  monitorFunctionCalls: () => {
    console.log('üéØ Interceptando TODOS los logs para detectar function calls...');
    
    // Store original console methods
    const originalLog = console.log;
    const originalError = console.error;
    const originalWarn = console.warn;
    
    // Function call detection
    const detectFunctionCall = (message) => {
      const msgStr = String(message).toLowerCase();
      
      if (msgStr.includes('function') && (msgStr.includes('call') || msgStr.includes('updateorder'))) {
        console.log('üö®üö®üö® FUNCTION CALL DETECTED!!! üö®üö®üö®');
        console.log('üìç Location:', message);
        console.log('üïí Time:', new Date().toLocaleTimeString());
        return true;
      }
      
      if (msgStr.includes('updateorder')) {
        console.log('üîç UpdateOrder mention detected:', message);
        return true;
      }
      
      return false;
    };
    
    // Override console methods
    console.log = function(...args) {
      const detected = args.some(detectFunctionCall);
      if (detected) {
        originalLog('üéØ INTERCEPTED LOG:', ...args);
      }
      originalLog.apply(console, args);
    };
    
    console.error = function(...args) {
      const detected = args.some(detectFunctionCall);
      if (detected) {
        originalError('üéØ INTERCEPTED ERROR:', ...args);
      }
      originalError.apply(console, args);
    };
    
    // Auto-restore after 60 seconds
    setTimeout(() => {
      console.log = originalLog;
      console.error = originalError;
      console.warn = originalWarn;
      console.log('üîÑ Console methods restored');
    }, 60000);
    
    console.log('üëÅÔ∏è Function call monitoring ACTIVE for 60 seconds');
    console.log('üó£Ô∏è Now speak: "Quiero una dona de chocolate"');
  },

  // 3. TEST TTS AVANZADO
  testTTS: async (text) => {
    const testText = text || "Perfecto, tengo una dona glaseada de chocolate para ti. Eso ser√≠a un d√≥lar nueve centavos.";
    
    console.log('üß™ TESTING SIMLI TTS...');
    console.log('üìù Text:', testText);
    
    const simliInstance = window.getSimliInstance?.();
    if (!simliInstance) {
      console.error('‚ùå Simli instance not found');
      return false;
    }
    
    try {
      console.log('üì§ Sending to Simli...');
      await simliInstance.sendTextMessage(testText);
      console.log('‚úÖ TTS sent successfully');
      console.log('üëÅÔ∏è Watch the avatar - lips should be moving!');
      return true;
    } catch (error) {
      console.error('‚ùå TTS failed:', error);
      return false;
    }
  },

  // 4. SIMULAR VAPI FUNCTION CALL
  simulateVapiFunctionCall: () => {
    console.log('üß™ SIMULANDO FUNCTION CALL DE VAPI...');
    
    const mockFunctionCall = {
      type: 'function-call',
      functionCall: {
        name: 'updateOrder',
        parameters: {
          orderDetailsData: [
            {
              name: "DONA GLASEADA DE CHOCOLATE",
              quantity: 1,
              price: 1.09
            },
            {
              name: "CAF√â AMERICANO REGULAR", 
              quantity: 1,
              price: 1.79
            }
          ]
        }
      }
    };
    
    console.log('üìã Mock function call:', mockFunctionCall);
    
    // Dispatch multiple event types
    const events = [
      'vapiMessage',
      'vapiFunctionCall', 
      'orderDetailsUpdated'
    ];
    
    events.forEach(eventType => {
      try {
        window.dispatchEvent(new CustomEvent(eventType, {
          detail: eventType === 'orderDetailsUpdated' 
            ? JSON.stringify(mockFunctionCall.functionCall.parameters.orderDetailsData)
            : mockFunctionCall
        }));
        console.log(`‚úÖ Dispatched: ${eventType}`);
      } catch (error) {
        console.error(`‚ùå Failed to dispatch ${eventType}:`, error);
      }
    });
    
    console.log('üëÄ Check if order appears in right panel');
  },

  // 5. TEST VAPI CONFIGURATION
  testVapiConfig: () => {
    console.log('üó£Ô∏è TESTING VAPI CONFIGURATION...');
    
    const vapiInstance = window.vapi;
    if (!vapiInstance) {
      console.error('‚ùå VAPI instance not found');
      return;
    }
    
    console.log('‚úÖ VAPI instance found');
    
    // Check if call is active
    const isCallActive = vapiInstance.isCallActive || false;
    console.log(`üìû Call active: ${isCallActive ? '‚úÖ YES' : '‚ùå NO'}`);
    
    if (!isCallActive) {
      console.log('üí° Start a call first by clicking "Start Order"');
      return;
    }
    
    // Check assistant ID
    const assistantId = process.env.NEXT_PUBLIC_VAPI_ASSISTANT_ID;
    if (assistantId) {
      console.log(`ü§ñ Assistant ID: ${assistantId.slice(0, 8)}...`);
      console.log('üí° Make sure this assistant has updateOrder function configured');
    }
  },

  // 6. TEST COMPLETO DE INTEGRACI√ìN
  testFullIntegration: async () => {
    console.log('üîó TESTING FULL VAPI-SIMLI INTEGRATION...');
    
    // Step 1: Test TTS
    console.log('\n1Ô∏è‚É£ Testing Simli TTS...');
    const ttsSuccess = await this.testTTS();
    
    if (!ttsSuccess) {
      console.error('‚ùå TTS failed - check Simli configuration');
      return;
    }
    
    // Step 2: Test function call simulation
    console.log('\n2Ô∏è‚É£ Testing function call simulation...');
    this.simulateVapiFunctionCall();
    
    // Step 3: Test VAPI config
    console.log('\n3Ô∏è‚É£ Testing VAPI configuration...');
    this.testVapiConfig();
    
    // Step 4: Monitor live
    console.log('\n4Ô∏è‚É£ Starting live monitoring...');
    this.monitorFunctionCalls();
    
    console.log('\n‚úÖ Integration test complete');
    console.log('üó£Ô∏è Now speak to test live integration');
  },

  // 7. AYUDA
  help: () => {
    console.log('‚ùì COMANDOS DE DEBUG AVANZADOS:');
    console.log('================================');
    console.log('drDonutAdvanced.fullDiagnosis()      - Diagn√≥stico completo');
    console.log('drDonutAdvanced.testTTS()            - Test TTS de Simli');
    console.log('drDonutAdvanced.testTTS("texto")     - Test TTS con texto custom');
    console.log('drDonutAdvanced.monitorFunctionCalls() - Monitor function calls');
    console.log('drDonutAdvanced.simulateVapiFunctionCall() - Simular function call');
    console.log('drDonutAdvanced.testVapiConfig()     - Test configuraci√≥n VAPI');
    console.log('drDonutAdvanced.testFullIntegration() - Test integraci√≥n completa');
    console.log('drDonutAdvanced.help()               - Esta ayuda');
    console.log('\nüö® TROUBLESHOOTING:');
    console.log('1. drDonutAdvanced.fullDiagnosis()');
    console.log('2. Si TTS no funciona ‚Üí revisar claves Simli');
    console.log('3. Si function calls no aparecen ‚Üí revisar configuraci√≥n VAPI Dashboard');
    console.log('4. drDonutAdvanced.testFullIntegration() para test completo');
  }
};

// Auto-initialize
console.log('‚úÖ Debug avanzado cargado');
console.log('üéØ Ejecuta: drDonutAdvanced.fullDiagnosis()');
